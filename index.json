{"project": "eldorado_py", "project_url": "", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"20": "b61ad9f7b5ae28cd72f48b8d288fb52c0ef7d00e"}, "revision_to_date": {"20": 1741085497000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen 5 4500U with Radeon Graphics"], "machine": ["IdeaPad"], "num_cpu": ["6"], "os": ["Linux 6.13.3-arch1-1"], "ram": ["7482024"], "python": ["3.13"], "numpy": ["2.2"], "branch": ["cppenv"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen 5 4500U with Radeon Graphics", "machine": "IdeaPad", "num_cpu": "6", "os": "Linux 6.13.3-arch1-1", "ram": "7482024", "python": "3.13", "numpy": "2.2", "branch": "cppenv"}], "benchmarks": {"benchmarks.TimeEnvs.peakmem_runner": {"code": "class TimeEnvs:\n    def peakmem_runner(self, *_):\n        self.sample()\n        self.step_func()\n        self.sync_fun()\n        self.end_fun()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        synced = mode == \"sync\"\n        env_cls = eldorado_py.get_vec_env(n)\n        sampler_cls = eldorado_py.get_vec_sampler(n)\n        envs = env_cls()\n        envs.reset(seed, 4, 3, eldorado_py.Difficulty.EASY, 100000, False)\n        self.envs = envs\n        samplers = sampler_cls(seed)\n        self.samplers = samplers\n        self.actions = samplers.get_actions()\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            runner = eldorado_py.get_runner(n)(envs, samplers, threads)\n            self.sample = runner.sample\n            if synced:\n                self.step_func = runner.step_sync\n                self.end_fun = lambda: None\n                self.sync_fun = lambda: runner.sync()\n            else:\n                self.step_func = runner.step\n                self.end_fun = lambda: runner.sync()\n                self.sync_fun = lambda: None\n        else:\n            self.step_func = lambda: envs.step(self.actions)\n            self.sample = lambda: samplers.sample(self.am)\n            self.end_fun = lambda: None\n            self.sync_fun = self.end_fun\n        self.reset = envs.reset", "name": "benchmarks.TimeEnvs.peakmem_runner", "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'async'", "'sync'"]], "timeout": 300, "type": "peakmemory", "unit": "bytes", "version": "ea3fd8a9409a7d351c253dc073a272391bd7a010e763aac1b49539c5b679a0aa"}, "benchmarks.TimeEnvs.time_reset": {"code": "class TimeEnvs:\n    def time_reset(self, *_):\n        if self.threaded:\n            raise SkipNotImplemented\n        for _ in range(N_STEPS//10):\n            self.reset()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        synced = mode == \"sync\"\n        env_cls = eldorado_py.get_vec_env(n)\n        sampler_cls = eldorado_py.get_vec_sampler(n)\n        envs = env_cls()\n        envs.reset(seed, 4, 3, eldorado_py.Difficulty.EASY, 100000, False)\n        self.envs = envs\n        samplers = sampler_cls(seed)\n        self.samplers = samplers\n        self.actions = samplers.get_actions()\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            runner = eldorado_py.get_runner(n)(envs, samplers, threads)\n            self.sample = runner.sample\n            if synced:\n                self.step_func = runner.step_sync\n                self.end_fun = lambda: None\n                self.sync_fun = lambda: runner.sync()\n            else:\n                self.step_func = runner.step\n                self.end_fun = lambda: runner.sync()\n                self.sync_fun = lambda: None\n        else:\n            self.step_func = lambda: envs.step(self.actions)\n            self.sample = lambda: samplers.sample(self.am)\n            self.end_fun = lambda: None\n            self.sync_fun = self.end_fun\n        self.reset = envs.reset", "min_run_count": 2, "name": "benchmarks.TimeEnvs.time_reset", "number": 0, "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'async'", "'sync'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "90cff6a20a551fad9ddfbab0719254e6a6dd863ff774412bd0ca439cb29284c0", "warmup_time": -1}, "benchmarks.TimeEnvs.time_run": {"code": "class TimeEnvs:\n    def time_run(self, *_):\n        for _ in range(N_STEPS):\n            self.sample()\n            self.step_func()\n        self.end_fun()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        synced = mode == \"sync\"\n        env_cls = eldorado_py.get_vec_env(n)\n        sampler_cls = eldorado_py.get_vec_sampler(n)\n        envs = env_cls()\n        envs.reset(seed, 4, 3, eldorado_py.Difficulty.EASY, 100000, False)\n        self.envs = envs\n        samplers = sampler_cls(seed)\n        self.samplers = samplers\n        self.actions = samplers.get_actions()\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            runner = eldorado_py.get_runner(n)(envs, samplers, threads)\n            self.sample = runner.sample\n            if synced:\n                self.step_func = runner.step_sync\n                self.end_fun = lambda: None\n                self.sync_fun = lambda: runner.sync()\n            else:\n                self.step_func = runner.step\n                self.end_fun = lambda: runner.sync()\n                self.sync_fun = lambda: None\n        else:\n            self.step_func = lambda: envs.step(self.actions)\n            self.sample = lambda: samplers.sample(self.am)\n            self.end_fun = lambda: None\n            self.sync_fun = self.end_fun\n        self.reset = envs.reset", "min_run_count": 2, "name": "benchmarks.TimeEnvs.time_run", "number": 0, "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'async'", "'sync'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "8cd283a7e74d9b8b23f2ec35a7a8edf88d30437442a54ed42f661a6c21defe42", "warmup_time": -1}, "benchmarks.TimeEnvs.time_sample": {"code": "class TimeEnvs:\n    def time_sample(self, *_):\n        for _ in range(N_STEPS):\n            self.sample()\n            self.sync_fun()\n        self.end_fun()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        synced = mode == \"sync\"\n        env_cls = eldorado_py.get_vec_env(n)\n        sampler_cls = eldorado_py.get_vec_sampler(n)\n        envs = env_cls()\n        envs.reset(seed, 4, 3, eldorado_py.Difficulty.EASY, 100000, False)\n        self.envs = envs\n        samplers = sampler_cls(seed)\n        self.samplers = samplers\n        self.actions = samplers.get_actions()\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            runner = eldorado_py.get_runner(n)(envs, samplers, threads)\n            self.sample = runner.sample\n            if synced:\n                self.step_func = runner.step_sync\n                self.end_fun = lambda: None\n                self.sync_fun = lambda: runner.sync()\n            else:\n                self.step_func = runner.step\n                self.end_fun = lambda: runner.sync()\n                self.sync_fun = lambda: None\n        else:\n            self.step_func = lambda: envs.step(self.actions)\n            self.sample = lambda: samplers.sample(self.am)\n            self.end_fun = lambda: None\n            self.sync_fun = self.end_fun\n        self.reset = envs.reset", "min_run_count": 2, "name": "benchmarks.TimeEnvs.time_sample", "number": 0, "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'async'", "'sync'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "107d58635db36a3511339a3a7c0227e6856d48b39ed91b4be8cd2582953c2cb8", "warmup_time": -1}}, "machines": {"IdeaPad": {"arch": "x86_64", "cpu": "AMD Ryzen 5 4500U with Radeon Graphics", "machine": "IdeaPad", "num_cpu": "6", "os": "Linux 6.13.3-arch1-1", "ram": "7482024", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}