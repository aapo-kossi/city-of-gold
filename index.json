{"project": "city_of_gold", "project_url": "https://city-of-gold.readthedocs.io", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"19": "b61ad9f7b5ae28cd72f48b8d288fb52c0ef7d00e", "34": "4dd8fb8cbffc987ca4a43a9dee56342eaa7ef0c0", "65": "8213407b330043514eb4f885545116452a029152"}, "revision_to_date": {"19": 1741085497000, "34": 1741303791000, "65": 1742694446000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen 5 4500U with Radeon Graphics"], "machine": ["IdeaPad"], "num_cpu": ["6"], "os": ["Linux 6.13.3-arch1-1"], "ram": ["7482024"], "python": ["3.13"], "numpy": ["2.2"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen 5 4500U with Radeon Graphics", "machine": "IdeaPad", "num_cpu": "6", "os": "Linux 6.13.3-arch1-1", "ram": "7482024", "python": "3.13", "numpy": "2.2", "branch": "main"}], "benchmarks": {"benchmarks.TimeEnvs.peakmem_runner": {"code": "class TimeEnvs:\n    def peakmem_runner(self, *_):\n        self.sample()\n        self.step_func()\n        self.sync_fun()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        runner = vec.get_runner(n)(threads)\n        runner.make_samplers(seed)\n        envs = runner.get_envs()\n        envs.reset(seed, 4, 3, city_of_gold.Difficulty.EASY, 100000, False)\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            self.sample = runner.sample\n            self.step_func = runner.step\n            self.sync_fun = runner.sync\n            runner.start_workers()\n        else:\n            self.step_func = runner.step_seq\n            self.sample = runner.sample_seq\n            self.sync_fun = lambda: None\n        self.reset = envs.reset", "name": "benchmarks.TimeEnvs.peakmem_runner", "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'threaded'"]], "timeout": 300, "type": "peakmemory", "unit": "bytes", "version": "44351c9eb3efa16af85e44647796fafddfa8687cc9c524e29c2bd98089d42043"}, "benchmarks.TimeEnvs.time_reset": {"code": "class TimeEnvs:\n    def time_reset(self, *_):\n        if self.threaded:\n            raise SkipNotImplemented\n        for _ in range(N_STEPS//10):\n            self.reset()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        runner = vec.get_runner(n)(threads)\n        runner.make_samplers(seed)\n        envs = runner.get_envs()\n        envs.reset(seed, 4, 3, city_of_gold.Difficulty.EASY, 100000, False)\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            self.sample = runner.sample\n            self.step_func = runner.step\n            self.sync_fun = runner.sync\n            runner.start_workers()\n        else:\n            self.step_func = runner.step_seq\n            self.sample = runner.sample_seq\n            self.sync_fun = lambda: None\n        self.reset = envs.reset", "min_run_count": 2, "name": "benchmarks.TimeEnvs.time_reset", "number": 0, "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'threaded'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "cf88c844dd26fee1c87c5053718996e7d7a6d3ee9e71e1859e399999c7a48ee5", "warmup_time": -1}, "benchmarks.TimeEnvs.time_run": {"code": "class TimeEnvs:\n    def time_run(self, *_):\n        for _ in range(N_STEPS):\n            self.sample()\n            self.step_func()\n        self.sync_fun()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        runner = vec.get_runner(n)(threads)\n        runner.make_samplers(seed)\n        envs = runner.get_envs()\n        envs.reset(seed, 4, 3, city_of_gold.Difficulty.EASY, 100000, False)\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            self.sample = runner.sample\n            self.step_func = runner.step\n            self.sync_fun = runner.sync\n            runner.start_workers()\n        else:\n            self.step_func = runner.step_seq\n            self.sample = runner.sample_seq\n            self.sync_fun = lambda: None\n        self.reset = envs.reset", "min_run_count": 2, "name": "benchmarks.TimeEnvs.time_run", "number": 0, "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'threaded'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "4c08edcf6e81ff5cd4dc9288a27a617e7a5ba534fcd5cba68220ae30b834f07a", "warmup_time": -1}, "benchmarks.TimeEnvs.time_sample": {"code": "class TimeEnvs:\n    def time_sample(self, *_):\n        for _ in range(N_STEPS):\n            self.sample()\n            self.sync_fun()\n        self.sync_fun()\n\n    def setup(self, n, seed, threads, mode):\n        if ((mode == \"sequential\") and (threads > 1)): raise NotImplementedError()\n        self.threaded = mode != \"sequential\"\n        runner = vec.get_runner(n)(threads)\n        runner.make_samplers(seed)\n        envs = runner.get_envs()\n        envs.reset(seed, 4, 3, city_of_gold.Difficulty.EASY, 100000, False)\n        self.am = envs.selected_action_masks\n        if self.threaded:\n            self.sample = runner.sample\n            self.step_func = runner.step\n            self.sync_fun = runner.sync\n            runner.start_workers()\n        else:\n            self.step_func = runner.step_seq\n            self.sample = runner.sample_seq\n            self.sync_fun = lambda: None\n        self.reset = envs.reset", "min_run_count": 2, "name": "benchmarks.TimeEnvs.time_sample", "number": 0, "param_names": ["param1", "param2", "param3", "param4"], "params": [["1", "2", "3", "4", "5", "6", "7", "8", "16", "32", "64", "128", "256"], ["12345"], ["1", "2", "3", "4", "5"], ["'sequential'", "'threaded'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "e0560cd35499f267f6aa19350f555d0d558a998745a895c15736a8cdbef1348a", "warmup_time": -1}}, "machines": {"IdeaPad": {"arch": "x86_64", "cpu": "AMD Ryzen 5 4500U with Radeon Graphics", "machine": "IdeaPad", "num_cpu": "6", "os": "Linux 6.13.3-arch1-1", "ram": "7482024", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}